// Motor Pins
#define MOTOR_LEFT_FWD 10
#define MOTOR_LEFT_BWD 11
#define MOTOR_RIGHT_FWD 9
#define MOTOR_RIGHT_BWD 3

// Gripper Pin
#define GRIPPER_PIN 8

// Define values for gripper being open or closed
#define GRIPPER_OPEN HIGH
#define GRIPPER_CLOSED LOW

// Sensor Pins
const unsigned char TRACK_SENSORS[] = {A7, A6, A5, A4, A3, A2, A1, A0};  // 8 sensors
int sensorReadings[8] = {0, 0, 0, 0, 0, 0, 0, 0};

// Threshold for detecting black
const unsigned int thresholdBlack = 800;  // Adjust based on sensor calibration

// Motor Speeds
#define SPEED_LEFT 200
#define SPEED_RIGHT 220
#define TURN_SPEED_LEFT 55
#define TURN_SPEED_RIGHT 60

// Variable to remember the last direction the robot lost the line
bool lastDirectionWasLeft = false;

// Flag to check if the robot has grabbed the object
bool hasGrabbedObject = false;

void setup() {
  // Set motor pins as outputs
  pinMode(MOTOR_LEFT_FWD, OUTPUT);
  pinMode(MOTOR_LEFT_BWD, OUTPUT);
  pinMode(MOTOR_RIGHT_FWD, OUTPUT);
  pinMode(MOTOR_RIGHT_BWD, OUTPUT);

  // Set gripper pin as output
  pinMode(GRIPPER_PIN, OUTPUT);

  // Start serial communication for debugging
  Serial.begin(9600);

  // Gripper setup: open the gripper initially
  digitalWrite(GRIPPER_PIN, GRIPPER_OPEN);  // Open the gripper (set pin HIGH)
  delay(1000);  // Wait for 1 second to allow the gripper to open
}

void loop() {
  // Read sensor values
  for (int i = 0; i < 8; i++) {
    sensorReadings[i] = analogRead(TRACK_SENSORS[i]);  // Read analog values from the sensors
  }

  // Check the position of the line
  int leftCount = 0;
  int rightCount = 0;

  for (int i = 0; i < 4; i++) {  // Check left side sensors (0-3)
    if (sensorReadings[i] > thresholdBlack) {
      leftCount++;
    }
  }

  for (int i = 4; i < 8; i++) {  // Check right side sensors (4-7)
    if (sensorReadings[i] > thresholdBlack) {
      rightCount++;
    }
  }

  // Check if the robot has detected the first black square and grab the object
  if (!hasGrabbedObject && leftCount > 0 && rightCount > 0) {
    grabObject();  // Close the gripper (grab the object)
    hasGrabbedObject = true;  // Set flag indicating object is grabbed
  }

  // If both right and left sides detect black equally, we may consider it as a point to drop the object
  if (hasGrabbedObject && leftCount == 8 && rightCount == 8) {  // All sensors detect black (second black square)
    dropObject();  // Open the gripper (drop the object)
    hasGrabbedObject = false;  // Reset flag after dropping the object
  }

  // If both left and right sides detect the line, move forward
  if (leftCount > 0 && rightCount > 0) {
    moveForward();
  }
  // If left side detects the line more, turn left
  else if (leftCount > 0) {
    turnLeft();
    lastDirectionWasLeft = true;  // Remember the last direction
  }
  // If right side detects the line more, turn right
  else if (rightCount > 0) {
    turnRight();
    lastDirectionWasLeft = false;  // Remember the last direction
  }
  // If no sensors detect the line, continue turning in the last known direction
  else {
    if (lastDirectionWasLeft) {
      turnLeft();  // Continue turning left
    } else {
      turnRight();  // Continue turning right
    }
  }

  delay(50);  // Short delay before the next sensor read
}

// Function to move both motors forward
void moveForward() {
  analogWrite(MOTOR_LEFT_FWD, SPEED_LEFT);
  analogWrite(MOTOR_RIGHT_FWD, SPEED_RIGHT);
}

// Function to turn left by adjusting motor speeds
void turnLeft() {
  analogWrite(MOTOR_LEFT_FWD, 0);  // Stop left motor
  analogWrite(MOTOR_RIGHT_FWD, TURN_SPEED_RIGHT);  // Speed up right motor
}

// Function to turn right by adjusting motor speeds
void turnRight() {
  analogWrite(MOTOR_LEFT_FWD, TURN_SPEED_LEFT);  // Speed up left motor
  analogWrite(MOTOR_RIGHT_FWD, 0);  // Stop right motor
}

// Function to grab an object (close the gripper)
void grabObject() {
  digitalWrite(GRIPPER_PIN, GRIPPER_CLOSED);  // Close the gripper (set pin LOW)
  delay(500);  // Wait for the gripper to close
}

// Function to drop an object (open the gripper)
void dropObject() {
  digitalWrite(GRIPPER_PIN, GRIPPER_OPEN);  // Open the gripper (set pin HIGH)
  delay(500);  // Wait for the gripper to open
}



