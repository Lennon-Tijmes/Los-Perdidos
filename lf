// Motor Pins
#define MOTOR_LEFT_FWD 10
#define MOTOR_LEFT_BWD 11
#define MOTOR_RIGHT_FWD 9
#define MOTOR_RIGHT_BWD 3

// Sensor Pins
const unsigned char TRACK_SENSORS[] = {A7, A6, A5, A4, A3, A2, A1, A0};  // 8 sensors
int sensorReadings[8] = {0, 0, 0, 0, 0, 0, 0, 0};

// Threshold for detecting black
const unsigned int thresholdBlack =

 800;  // Adjust based on sensor calibration

// Motor Speeds
#define SPEED_LEFT 200
#define SPEED_RIGHT 220
#define TURN_SPEED_LEFT 55
#define TURN_SPEED_RIGHT 60

// Variable to remember the last direction the robot lost the line
bool lastDirectionWasLeft = false;

void setup() {
  // Set motor pins as outputs
  pinMode(MOTOR_LEFT_FWD, OUTPUT);
  pinMode(MOTOR_LEFT_BWD, OUTPUT);
  pinMode(MOTOR_RIGHT_FWD, OUTPUT);
  pinMode(MOTOR_RIGHT_BWD, OUTPUT);

  // Start serial communication for debugging
  Serial.begin(9600);
}

void loop() {
  // Read sensor values
  for (int i = 0; i < 8; i++) {
    sensorReadings[i] = analogRead(TRACK_SENSORS[i]);  // Read analog values from the sensors
  }

  // Check the position of the line
  int leftCount = 0;
  int rightCount = 0;

  for (int i = 0; i < 4; i++) {  // Check left side sensors (0-3)
    if (sensorReadings[i] > thresholdBlack) {
      leftCount++;
    }
  }

  for (int i = 4; i < 8; i++) {  // Check right side sensors (4-7)
    if (sensorReadings[i] > thresholdBlack) {
      rightCount++;
    }
  }

  // If both left and right sides detect the line, move forward
  if (leftCount > 0 && rightCount > 0) {
    moveForward();
  }
  // If left side detects the line more, turn left
  else if (leftCount > 0) {
    turnLeft();
    lastDirectionWasLeft = true;  // Remember the last direction
  }
  // If right side detects the line more, turn right
  else if (rightCount > 0) {
    turnRight();
    lastDirectionWasLeft = false;  // Remember the last direction
  }
  // If no sensors detect the line, continue turning in the last known direction
  else {
    if (lastDirectionWasLeft) {
      turnLeft();  // Continue turning left
    } else {
      turnRight();  // Continue turning right
    }
  }

  delay(50);  // Short delay before the next sensor read
}

// Function to move both motors forward
void moveForward() {
  analogWrite(MOTOR_LEFT_FWD, SPEED_LEFT);
  analogWrite(MOTOR_RIGHT_FWD, SPEED_RIGHT);

}

// Function to turn left by adjusting motor speeds
void turnLeft() {
   // Stop left motor
  analogWrite(MOTOR_RIGHT_FWD, TURN_SPEED_RIGHT);  // Speed up right motor

}

// Function to turn right by adjusting motor speeds
void turnRight() {
  analogWrite(MOTOR_LEFT_FWD, TURN_SPEED_LEFT);  // Speed up left motor
 

}

