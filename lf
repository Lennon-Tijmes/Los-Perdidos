//#define motorStop

// Motor speed definitions for object evasion
#define SPEED_LEFT 200
#define SPEED_RIGHT 220
#define TURN_SPEED_LEFT 60
#define TURN_SPEED_RIGHT 70

#define MOTOR_LEFT_FWD 9
#define MOTOR_LEFT_BWD 11
#define MOTOR_RIGHT_FWD 10
#define MOTOR_RIGHT_BWD 3

// Sensor pins for ultrasonic
#define TRIG_PIN 12   
#define ECHO_PIN 13

// Line following sensor array (assuming 8 sensors)
const unsigned char TRACK_SENSORS[] = {A7, A6, A5, A4, A3, A2, A1, A0};  // 8 sensors
int sensorReadings[8] = {0, 0, 0, 0, 0, 0, 0, 0};
const unsigned int thresholdBlack = 800;  // Adjust for black line detection
bool lastDirectionWasLeft = false;

void setup() {
  // Set motor direction pins as outputs
  pinMode(MOTOR_LEFT_FWD, OUTPUT);
  pinMode(MOTOR_LEFT_BWD, OUTPUT);
  pinMode(MOTOR_RIGHT_FWD, OUTPUT);
  pinMode(MOTOR_RIGHT_BWD, OUTPUT);

  // Set ultrasonic sensor pins
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  // Start serial communication for debugging
  Serial.begin(9600); 
}

void loop() {
  long duration, distance;

  if(millis() % 200 == 0)
  {
    // Measure distance from the ultrasonic sensor
    digitalWrite(TRIG_PIN, LOW);
    delayMicroseconds(2);  // Ensure trigger is off
    digitalWrite(TRIG_PIN, HIGH);
    delayMicroseconds(10);  // Send a 10Âµs pulse
    digitalWrite(TRIG_PIN, LOW);
    duration = pulseIn(ECHO_PIN, HIGH);  // Measure pulse duration
    distance = duration * 0.034 / 2;     // Calculate distance in cm

    // If an object is detected within 20 cm, evade
    if (distance > 0 && distance <= 20) {
      Serial.write("evade\n");
      evadeObstacle();  // Temporarily evade obstacle
    } 
  }
  followLine();  // Follow the line when no obstacle is detected
}

// Line following function (using your original logic with 50ms delay)
void followLine() {
  // Read sensor values
  for (int i = 0; i < 8; i++) {
    sensorReadings[i] = analogRead(TRACK_SENSORS[i]);  // Read analog values from the sensors
  }

  // Check the position of the line
  int leftCount = 0;
  int rightCount = 0;

  for (int i = 0; i < 4; i++) {  // Check left side sensors (0-3)
    if (sensorReadings[i] > thresholdBlack) {
      leftCount++;
    }
  }

  for (int i = 4; i < 8; i++) {  // Check right side sensors (4-7)
    if (sensorReadings[i] > thresholdBlack) {
      rightCount++;
    }
  }

  // If both left and right sides detect the line, move forward
  if (leftCount > 0 && rightCount > 0) {
    moveForward();
  }
  // If left side detects the line more, turn left
  else if (leftCount > 0) {
    turnLeft();
    lastDirectionWasLeft = true;  // Remember the last direction
  }
  // If right side detects the line more, turn right
  else if (rightCount > 0) {
    turnRight();
    lastDirectionWasLeft = false;  // Remember the last direction
  }
  // If no sensors detect the line, continue turning in the last known direction
  else {
    if (lastDirectionWasLeft) {
      turnLeft();  // Continue turning left
    } else {
      turnRight();  // Continue turning right
    }
  }
}

// Object evasion function
void evadeObstacle() {
  
 /// Turn right to evade
  turnRight();
  delay(700);
  moveForward();
  delay(500);
  turnLeft();
  delay(2000);
  moveForward();
  delay(800);
  turnLeft();
  delay(2000);
  moveForward();
  delay(1000);
  turnRight();
  delay(2000);
  moveForward();
  delay(400);

  
  
}

void moveForward() {
  analogWrite(MOTOR_LEFT_FWD, SPEED_LEFT);
  analogWrite(MOTOR_RIGHT_FWD, SPEED_RIGHT);
}

void turnLeft() {
  // Serial.write("left\n"); 
  analogWrite(MOTOR_RIGHT_FWD, TURN_SPEED_RIGHT);  
}

void turnRight() {
  // Serial.write("right\n");
  analogWrite(MOTOR_LEFT_FWD, TURN_SPEED_LEFT);  
}
